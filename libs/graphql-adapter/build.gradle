plugins {
	// Source: https://github.com/Netflix/dgs-codegen
	// Guide: https://netflix.github.io/dgs/generating-code-from-schema/
	// Note: version is dictated by the parent level build.gradle and gradle.properties files
	id "com.netflix.dgs.codegen"
}

dependencies {
	api project(":mongo-adapter") // includes the data model and kafka-adapter

	// Note that versions are managed by the platform dependency plugin here (similar to how spring does it)
	// Netflix DGS GraphQL: https://netflix.github.io/dgs/getting-started/
	implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release"))
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"
	implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
	implementation "com.netflix.graphql.dgs:graphql-dgs-subscriptions-websockets-autoconfigure"

	implementation 'com.google.guava:guava:31.0.1-jre'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Source: DGS sample project uses these - TBD If we will too
	testImplementation 'com.netflix.graphql.dgs:graphql-dgs-client'
	testImplementation 'io.projectreactor:reactor-test'
}


// DGS Code generation
// See specific config options: https://netflix.github.io/dgs/generating-code-from-schema/#configuring-code-generation
generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
	packageName = 'com.mikeoertli.sample.mrs.graphql.generated' // The package name to use to generate sources
	generateClient = true // Enable generating the type safe query API
//	typeMapping = ["MyGraphQLType": "com.mypackage.MyJavaType"]
//	generateClient = true
//	generateInterfaces = true
}


task printSourceSetInformation(){
	doLast{
		sourceSets.each { srcSet ->
			println "["+srcSet.name+"]"
			print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
			print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
			println ""
		}
	}
}