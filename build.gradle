plugins {
    id 'java'

    // Spring Boot Plugin - Reacting to the Java Plugin
    // More info: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#reacting-to-other-plugins.java
    // When Gradle’s java plugin is applied to a project, the Spring Boot plugin:
    //   * Creates a BootJar task named bootJar that will create an executable, fat jar for the project. The jar will contain everything on the runtime classpath of the main source set; classes are packaged in BOOT-INF/classes and jars are packaged in BOOT-INF/lib
    //   * Configures the assemble task to depend on the bootJar task.
    //   * Configures the jar task to use plain as the convention for its archive classifier.
    //   * Creates a BootBuildImage task named bootBuildImage that will create a OCI image using a buildpack.
    //   * Creates a BootRun task named bootRun that can be used to run your application.
    //   * Creates a configuration named bootArchives that contains the artifact produced by the bootJar task.
    //   * Creates a configuration named developmentOnly for dependencies that are only required at development time, such as Spring Boot’s Devtools, and should not be packaged in executable jars and wars.
    //   * Creates a configuration named productionRuntimeClasspath. It is equivalent to runtimeClasspath minus any dependencies that only appear in the developmentOnly configuration.
    //   * Configures any JavaCompile tasks with no configured encoding to use UTF-8.
    //   * Configures any JavaCompile tasks to use the -parameters compiler argument.
    id 'org.springframework.boot' version '2.6.3' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Source: https://github.com/Netflix/dgs-codegen
    // Guide: https://netflix.github.io/dgs/generating-code-from-schema/
    id "com.netflix.dgs.codegen" version "${dgsCodeGenPluginVersion}" apply false
}

// https://spring.io/guides/gs/multi-module/
// Took a lot of guidance from: https://reflectoring.io/spring-boot-gradle-multi-module/
subprojects {
    group = 'com.mikeoertli.sample.mrs'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'application'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // more info: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/
//            mavenBom("org.springframework.boot:spring-boot-dependencies:2.6.3")
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        }
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-devtools")
        implementation 'org.springframework.boot:spring-boot-starter'

        implementation 'org.apache.commons:commons-lang3:3.12.0'

        testImplementation 'org.assertj:assertj-core:3.22.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image.customization
    bootBuildImage  {
        // These are the modules for which we do not want to build an image
        def noDockerModules = [ 'kafka-adapter', 'db' , 'mongo-adapter', 'model' ]
        if (noDockerModules.contains(project.name)) {
            enabled = false
        } else
        {
            // Create two tags, one with the current version and one with 'latest'
            def imageName = 'mikeoertli/mike-rowe-service-' + project.name
            tags=[imageName + ':' + project.version, imageName + ':latest']
        }
    }

    springBoot {
        // Idea from: https://tomgregory.com/unleashing-the-spring-boot-gradle-plugin/
        // Also seen here: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#integrating-with-actuator
        // With app running (`./gradlew bootRun`) you can see metadata build info at:
        // http://localhost:8080/actuator/info
        buildInfo()
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}